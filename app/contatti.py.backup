from fastapi import APIRouter, Request, Form, Depends, HTTPException, Response
from fastapi.responses import RedirectResponse, HTMLResponse, PlainTextResponse
from app.deps import require_admin, get_current_user
from app.utils.save_with_notifica import save_and_notify
from app.models.contacts_model import ContactIn, ContactOut
from bson import ObjectId
from datetime import datetime
from app.constants import DEFAULT_BRANCHES, DEFAULT_HIRE_TYPES
from typing import Annotated
from app.notifiche import crea_notifica
from app.ws_broadcast import broadcast_message, broadcast_resource_event
from app.utils.notification_helpers import create_action_notification_payload, create_admin_confirmation_trigger
import json

contatti_router = APIRouter(tags=["contatti"])

@contatti_router.post(
    "/contatti/new",
    response_class=Response,
    dependencies=[Depends(require_admin)]
)
async def create_contact(
    request: Request,
    name: str = Form(...),
    email: str = Form(...),
    phone: str = Form(None),
    bu: str = Form(None),
    team: str = Form(None),
    branch: str = Form(...),
    employment_type: str = Form(...),
    work_branch: str = Form(...),
    show_on_home: Annotated[bool, Form()] = False,
    current_user: dict = Depends(require_admin)
):
    db = request.app.state.db
    employment_type_list = [employment_type] if isinstance(employment_type, str) else (employment_type or [])
    result = await db.contatti.insert_one({
        "name": name.strip(),
        "email": email.strip(),
        "phone": (phone or "").strip(),
        "bu": (bu or "").strip() or None,
        "team": (team or "").strip() or None,
        "branch": branch,
        "employment_type": employment_type_list,
        "work_branch": work_branch,
        "show_on_home": bool(show_on_home),
        "created_at": datetime.utcnow()
    })
    new_id = result.inserted_id
    if show_on_home:
        highlight_data = {
            "type": "contact",
            "object_id": str(new_id),
            "title": name.strip(),
            "created_at": datetime.utcnow(),
            "branch": branch,
            "employment_type": employment_type_list,
            "email": email.strip(),
            "phone": (phone or "").strip(),
            "bu": (bu or "").strip() or None,
            "team": (team or "").strip() or None,
            "work_branch": work_branch
        }
        print("Salvo in home_highlights (creazione):", highlight_data)
        await db.home_highlights.update_one(
            {"type": "contact", "object_id": str(new_id)},
            {"$set": highlight_data},
            upsert=True
        )
        # --- AGGIUNTA BROADCAST HIGHLIGHT ---
        try:
            payload_highlight = {
                "type": "refresh_home_highlights"
            }
            await broadcast_message(payload_highlight)
        except Exception as e:
            print("[WebSocket] Errore broadcast su update_contact_highlight:", e)
        # --- FINE AGGIUNTA ---
    await crea_notifica(
        request=request,
        tipo="contatto",
        titolo=name.strip(),
        branch=branch,
        id_risorsa=str(new_id),
        employment_type=employment_type_list
    )

    # ðŸ“¡ BROADCAST a tutti gli utenti
    u = request.state.user
    await broadcast_resource_event(
        event="add",
        item_type="contact",
        item_id=str(new_id),
        user_id=str(u["_id"]),
    )

    # 1. Notifica WebSocket per lo staff
    print(f"[DEBUG] Creazione notifica per contatto '{name}' da utente {current_user['_id']}")
    payload = create_action_notification_payload('create', 'contatto', name.strip(), str(current_user["_id"]))
    print(f"[DEBUG] Payload notifica: {payload}")
    await broadcast_message(payload, branch=branch, employment_type=employment_type, exclude_user_id=str(current_user["_id"]))
    print(f"[DEBUG] Broadcast completato")

    # 2. Conferma per l'admin
    print(f"[DEBUG] Creazione conferma admin")
    resp = Response(status_code=200)
    # Prima mostra la conferma
    resp.headers["HX-Trigger"] = create_admin_confirmation_trigger('create', name.strip())
    # Poi chiudi la modale e fai il redirect
    resp.headers["HX-Trigger-After-Settle"] = json.dumps({
        "closeModal": "true",
        "redirectToContatti": "/contatti"
    })
    print(f"[DEBUG] Headers risposta: {dict(resp.headers)}")
    return resp

@contatti_router.get("/contatti", response_class=HTMLResponse)
async def list_contacts(
    request: Request,
    current_user = Depends(get_current_user)
):
    db = request.app.state.db
    employment_type = current_user.get("employment_type")
    branch = current_user.get("branch")
    if current_user["role"] == "admin" or not employment_type:
        mongo_filter = {}
    else:
        mongo_filter = {
            "$and": [
                {
                    "$or": [
                        {"branch": "*"},
                        {"branch": branch}
                    ]
                },
                {
                    "$or": [
                        {"employment_type": {"$elemMatch": {"$in": [employment_type, "*"]}}},
                        {"employment_type": {"$exists": False}},
                        {"employment_type": []}
                    ]
                }
            ]
        }
    contacts = await db.contatti.find(mongo_filter).sort("created_at", -1).to_list(None)
    if request.headers.get("HX-Request") == "true":
        return request.app.state.templates.TemplateResponse(
            "contatti/contatti_list_partial.html",
            {"request": request, "contacts": contacts, "current_user": current_user}
        )
    else:
        return request.app.state.templates.TemplateResponse(
            "contatti/contatti_index.html",
            {"request": request, "contacts": contacts, "current_user": current_user}
        )

@contatti_router.get(
    "/contatti/{contact_id}/edit",
    response_class=HTMLResponse,
    dependencies=[Depends(require_admin)]
)
async def edit_contact_form(
    request: Request,
    contact_id: str,
    user = Depends(get_current_user)
):
    db = request.app.state.db
    contact = await db.contatti.find_one({"_id": ObjectId(contact_id)})
    if not contact:
        raise HTTPException(404, "Contatto non trovato")
    branches = await db.branches.distinct("name")
    if not branches:
        branches = DEFAULT_BRANCHES
    hire_types = await db.hire_types.find().to_list(None)
    if not hire_types:
        hire_types = DEFAULT_HIRE_TYPES
    # Controllo se il contatto Ã¨ in evidenza
    highlight = await db.home_highlights.find_one({"type": "contact", "object_id": str(contact_id)})
    show_on_home = bool(highlight)
    return request.app.state.templates.TemplateResponse(
        "contatti/contatti_edit_partial.html",
        {
            "request": request,
            "c": contact,
            "user": user,
            "branches": branches,
            "hire_types": hire_types,
            "show_on_home": show_on_home
        }
    )

@contatti_router.post("/contatti/{contact_id}/edit")
async def edit_contact_submit(request: Request, contact_id: str, user: dict = Depends(get_current_user)):
    form = await request.form()
    db = request.app.state.db
    
    name = form.get("name", "").strip()
    branch = form.get("branch", "").strip()
    employment_type_list = form.getlist("employment_type")
    # ... rest of the function ... 